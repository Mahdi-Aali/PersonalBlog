// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalBlog.CategoryService.Infrastructure.Database;

#nullable disable

namespace PersonalBlog.CategoryService.Api.Migrations
{
    [DbContext(typeof(CategoryServiceDbContext))]
    [Migration("20240706195000_init_db")]
    partial class init_db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonalBlog.CategoryService.Domain.AggregateModels.CategoryAggregate.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryVisibilityStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("ConcurencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime>("FromDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("FromDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ToDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("ToDate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryVisibilityStatusId")
                        .IsUnique();

                    b.ToTable("Categories", "category");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("Archive_Categories", "category");
                                ttb
                                    .HasPeriodStart("FromDate")
                                    .HasColumnName("FromDate");
                                ttb
                                    .HasPeriodEnd("ToDate")
                                    .HasColumnName("ToDate");
                            }));
                });

            modelBuilder.Entity("PersonalBlog.CategoryService.Domain.AggregateModels.CategoryAggregate.CategoryVisibilityStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CategoryVisibilityStatus", "category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Enable"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Disable"
                        });
                });

            modelBuilder.Entity("PersonalBlog.CategoryService.Domain.AggregateModels.CategoryAggregate.Category", b =>
                {
                    b.HasOne("PersonalBlog.CategoryService.Domain.AggregateModels.CategoryAggregate.CategoryVisibilityStatus", "CategoryVisibilityStatus")
                        .WithOne()
                        .HasForeignKey("PersonalBlog.CategoryService.Domain.AggregateModels.CategoryAggregate.Category", "CategoryVisibilityStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryVisibilityStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
